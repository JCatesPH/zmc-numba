{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Testing example from github to see ZMCIntegral is working correctly.\n",
    "https://github.com/Letianwu/ZMCintegral\n",
    "\n",
    "It is the integration of this function:\n",
    "https://github.com/Letianwu/ZMCintegral/blob/master/examples/example01.png?raw=true"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "from numba import cuda\n",
    "from ZMCintegral import ZMCintegral\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# user defined function\n",
    "@cuda.jit(device=True)\n",
    "def my_func(x):\n",
    "    return math.sin(x[0]+x[1]+x[2]+x[3])\n",
    "\n",
    "MC = ZMCintegral.MCintegral(my_func,[[0,1],[0,2],[0,5],[0,0.6]])\n",
    "\n",
    "MC.depth = 2\n",
    "MC.sigma_multiplication = 5\n",
    "MC.num_trials = 5\n",
    "MC.available_GPU=[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "4 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "result = -1.0459077321352424    std = 7.72495781264933e-06\n",
      "This was calculated in 45.11164593696594 s\n"
     ]
    }
   ],
   "source": [
    "# obtaining the result\n",
    "t0 = time.time()\n",
    "result = MC.evaluate()\n",
    "t1 = time.time()\n",
    "\n",
    "# print the formatted result\n",
    "print('result = %s    std = %s' % (result[0], result[1]))\n",
    "print('This was calculated in', t1-t0, 's')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Increasing sigma multiplication caused the integral to not converge."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Integration of Gaussian function for testing.\n",
    "\n",
    "This function with 9 variables was tested in the paper. \n",
    "https://arxiv.org/pdf/1902.07916.pdf\n",
    "\n",
    "NOTE: \"sigma_multiplication\" has been increased to 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "from numba import cuda\n",
    "from ZMCintegral import ZMCintegral\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# user defined function\n",
    "@cuda.jit(device=True)\n",
    "# encoding: utf-8\n",
    "\n",
    "def gauss_func(x):\n",
    "    s = 0.01\n",
    "    return math.exp(-1/(2*s**2)*(x[0]**2+x[1]**2+x[2]**2+x[3]**2))/(math.sqrt(2*3.14)*s)**4\n",
    "\n",
    "MC2 = ZMCintegral.MCintegral(gauss_func,[[-1,1],[-1,1],[-1,1],[-1,1]])\n",
    "\n",
    "MC2.depth = 2\n",
    "MC2.sigma_multiplication = 10\n",
    "MC2.num_trials = 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "192 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "175 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "168 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "179 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "191 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "168 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "178 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "185 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "168 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "192 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "190 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "182 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "190 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "183 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "179 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "183 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "result = 1.0010139241546732    std = 3.5688915729007414e-05\n",
      "This was calculated in 466.8458631038666 s\n"
     ]
    }
   ],
   "source": [
    "# obtaining the result\n",
    "t0 = time.time()\n",
    "result = MC2.evaluate()\n",
    "t1 = time.time()\n",
    "\n",
    "# print the formatted result\n",
    "print('result = %s    std = %s' % (result[0], result[1]))\n",
    "print('This was calculated in', t1-t0, 's')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Gaussian Function with even higher sigma multiplication\n",
    "\n",
    "I will test evaluating the function with sigma multiplication set to 20."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "from numba import cuda\n",
    "from ZMCintegral import ZMCintegral\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# user defined function\n",
    "@cuda.jit(device=True)\n",
    "# encoding: utf-8\n",
    "\n",
    "def gauss_func(x):\n",
    "    s = 0.01\n",
    "    return math.exp(-1/(2*s**2)*(x[0]**2+x[1]**2+x[2]**2+x[3]**2))/(math.sqrt(2*3.14)*s)**4\n",
    "\n",
    "MC2 = ZMCintegral.MCintegral(gauss_func,[[-1,1],[-1,1],[-1,1],[-1,1]])\n",
    "\n",
    "MC2.depth = 2\n",
    "MC2.sigma_multiplication = 20\n",
    "MC2.num_trials = 5\n",
    "MC2.available_GPU=[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "94 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "81 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "94 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "84 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "92 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "93 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "90 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "90 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "93 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "93 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "84 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "90 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "84 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "93 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "84 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "101 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "result = 1.001030228092629    std = 3.6422880641890965e-05\n",
      "This was calculated in 462.5125949382782 s\n"
     ]
    }
   ],
   "source": [
    "# obtaining the result\n",
    "t0 = time.time()\n",
    "result = MC2.evaluate()\n",
    "t1 = time.time()\n",
    "\n",
    "# print the formatted result\n",
    "print('result = %s    std = %s' % (result[0], result[1]))\n",
    "print('This was calculated in', t1-t0, 's')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Not much improvement surprisingly. The number of recomputed hypercubes is way down though.\n",
    "\n",
    "# Gaussian Function with increased trial number\n",
    "\n",
    "The idea of this is that the function being highly singular may make the handling of the integration easier if the standard error of each cell is lowered by increasing the trial number.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "99 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "97 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "100 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "98 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "97 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "98 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "88 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "93 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "86 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "91 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "94 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "102 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "94 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "95 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "106 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "98 hypercube(s) need(s) to be recalculated, to save time, try drastically increasing sigma_multiplication.\n",
      "result = 1.0009978267588917    std = 3.722059763077021e-05\n",
      "This was calculated in 735.2771952152252 s\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "from numba import cuda\n",
    "from ZMCintegral import ZMCintegral\n",
    "import time\n",
    "\n",
    "# user defined function\n",
    "@cuda.jit(device=True)\n",
    "# encoding: utf-8\n",
    "\n",
    "def gauss_func(x):\n",
    "    s = 0.01\n",
    "    return math.exp(-1/(2*s**2)*(x[0]**2+x[1]**2+x[2]**2+x[3]**2))/(math.sqrt(2*3.14)*s)**4\n",
    "\n",
    "MC2 = ZMCintegral.MCintegral(gauss_func,[[-1,1],[-1,1],[-1,1],[-1,1]])\n",
    "\n",
    "MC2.depth = 2\n",
    "MC2.sigma_multiplication = 20\n",
    "MC2.num_trials = 8\n",
    "MC2.available_GPU=[0]\n",
    "\n",
    "# obtaining the result\n",
    "t0 = time.time()\n",
    "result = MC2.evaluate()\n",
    "t1 = time.time()\n",
    "\n",
    "# print the formatted result\n",
    "print('result = %s    std = %s' % (result[0], result[1]))\n",
    "print('This was calculated in', t1-t0, 's')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
